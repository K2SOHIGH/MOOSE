configfile: "config/config.yaml"

import os
import yaml

from snakemake import logger


# input for dRep -> file with one genome per line  (must be gunzip)


GENOMES = yaml.load(open(config['input']),Loader=yaml.SafeLoader)
RESDIR = config["output"]
EXTENSION = config['extension']
PATTERN = config['pattern']
DREPOUT= os.path.join(RESDIR,"tmp")


rule dRep_summary_table:
    output:
        Path(RESDIR) / 'dRep.tsv'
    input:
        wdb = Path(DREPOUT) / 'data_tables' / 'Wdb.csv', #wining_genome cluster score
        cdb = Path(DREPOUT) / 'data_tables' / 'Cdb.csv', #genome Scluster, threshold, clumet, algo_comp, Pcluster
    run:
        """merge wdb and cdb in a unique table"""
        import pandas as pd
        cdb = pd.read_csv("Cdb.csv",sep=',',index_col=0)
        wdb = pd.read_csv("Wdb.csv",sep=',',index_col=0)
        wdb['winning'] = True
        df = pd.concat([cdb,wdb[['score','winning']]],axis=1)
        df.winning.fillna(False,inplace=True)
        df.to_csv(str(output),sep='\t',header=True,index=True)

rule dRep:
    """
    DREPOUT
    ├── data
    │   ├── Clustering_files
    │   ├── MASH_files
    │   │   └── MASH_files
    │   │       └── sketches
    │   │           └── chunk_0
    │   └── fastANI_files
    │       └── tmp
    ├── data_tables
    ├── dereplicated_genomes
    ├── figures
    └── log
    """
    output:
        # directory( str(Path(DREPOUT) / "dereplicated_genomes" )),
        Path(DREPOUT) / "data_tables" / "Wdb.csv",
        Path(DREPOUT) / "data_tables" / "Cdb.csv",
    input:
        Path(RESDIR) / "path_to_genomes.txt",
    params:
        minlen = config['length'],
        mincomp = config['completness'],
        mincom = config['contamination'],
        ignore_qual = "--ignoreGenomeQuality" if config['ignore_quality'] else "",
        genome_qual = "--genomeInfo" if config['qual_info'] else "",
        primary_ani = config['primary_ani'],
        secondary_ani = config['secondary_ani'],
        cov_threshold = config['coverage'],
        multiround = "--multiround_primary_clustering" if config['multiround'] else "",
    shell:
        "dRep dereplicate {output}  "
        "-g {input} "
        "-l {params.minlen}         "
        "-comp {params.mincomp}     "
        "-con {params.mincont}      "
        "{params.ignore_qual}       "
        "{params.genome_qual}       "
        "-pa (params.primary_ani)   "
        "-sa (params.secondary_ani) "
        "-nc {params.cov_threshold} "
        "{params.multiround}        " 
        
rule dRep_input_file:
    output:
        temp(Path(RESDIR) / "path_to_genomes.txt"),
    params:
        genomes = GENOMES,
    run:
        with open(str(output),'w') as fh:
            for k,p in params.genomes:
                fh.write(p+"\n")



# genomes info file must have :
# genome, completeness, contamination where genome is the basename of the genome file


