#!/usr/bin/env python
# -*- coding: utf-8 -*-
configfile: "config/config.yaml"

import os
import yaml

from snakemake import logger

print(config)

BINS = yaml.load(open(config["input"]),Loader=yaml.SafeLoader)
RESDIR = config['output']

if not BINS:
    logger.error("No genome provided :(")
    exit(-1)    

####################################################################################################
'''
    Search CDS per genome using prodigal 
'''
####################################################################################################


rule target_prodigal:
    input:
        os.path.join(RESDIR,"tables","summary.tsv"),
        expand(os.path.join(RESDIR, "cds","{bin}", "{bin}.coord.gff"),bin=BINS.keys()),
        expand(os.path.join(RESDIR, "cds","{bin}", "{bin}_cds_nucleotide.fnn"),bin=BINS.keys()),
        expand(os.path.join(RESDIR, "cds","{bin}", "{bin}_translated_cds.faa"),bin=BINS.keys()),

def define_mode(wildcards,checkm_stats=config['checkm_stats']):
    if checkm_stats:
        if os.path.isfile(checkm_stats):
            df = pd.read_csv(checkm_stats,sep="\t",index_col=0)
            comp,conta = df.loc[wildcards.bin,["completeness","contamination"]].values
            if comp > 50 and conta < 10:
                return "single"
            else:
                return "meta"
    return config['mode']

rule expand_summary:
    output:
        os.path.join(RESDIR,"tables","summary.tsv")
    input:
        expand(os.path.join(RESDIR, "cds","{bin}","summary.tsv"),bin=BINS.keys())
    shell:
        'echo -e accession"\t"#contigs"\t"#genes"\t"prodigal_mode > {output} && '
        'cat {input} >> {output} '

rule summarize:
    output:
        temp(os.path.join(RESDIR,"cds","{bin}","summary.tsv")),
    input:
        sum= os.path.join(RESDIR, "cds","{bin}","{bin}.sum.txt"),
        coor= os.path.join(RESDIR, "cds","{bin}","{bin}.coord.gff"),
    params:
        mode=define_mode,
    shell:
        'echo -e {wildcards.bin}"\t"'
        '$(cat {input.sum} | wc -l)"\t"'
        '$(cat {input.coor} | wc -l)"\t"'
        '{params.mode} > {output}'


rule Prodigal:
    output:
        sum_f = os.path.join(RESDIR, "cds","{bin}","{bin}.sum.txt"),
        coordinates = os.path.join(RESDIR, "cds","{bin}","{bin}.coord.gff"),
        tmp = temp(os.path.join(RESDIR, "cds","{bin}","{bin}.tmpcoord.gff")),
        nucleo = os.path.join(RESDIR, "cds","{bin}" , "{bin}_cds_nucleotide.fnn"),
        transl = os.path.join(RESDIR, "cds","{bin}", "{bin}_translated_cds.faa"),
    input:
        lambda wildcards: BINS[wildcards.bin],
    params:
        mode = define_mode,
        cmd = lambda wildcards : "gunzip -c" if BINS[wildcards.bin].endswith(".gz") \
            else "cat",
    conda:
        os.path.join("envs", "prodigal-2.6.yaml")
    log:
        os.path.join(RESDIR,"logs","prodigal.{bin}.log")
    shell:
        '{params.cmd} {input} | prodigal '
        '-o {output.tmp} ' 
        '-f gff '
        '-d {output.nucleo} '
        '-a {output.transl} '
        '-p {params.mode}  &> {log} && ' #not consistent with the doc
        'grep -v "#" {output.tmp} | sed "s/;/	/g" | sed "s/ID=//g"  > {output.coordinates} && '
        'grep "# Sequence Data" {output.tmp} > {output.sum_f} '

