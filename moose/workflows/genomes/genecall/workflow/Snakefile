#!/usr/bin/env python
# -*- coding: utf-8 -*-
configfile: "config/config.yaml"

import os
import yaml

from snakemake import logger


_genecall_input_ = yaml.load(open(config["input"]),Loader=yaml.SafeLoader)
_genecall_resdir_ = config['output']

if not _genecall_input_:
    logger.error("No genome provided :(")
    exit(-1)    

####################################################################################################
'''
    Search CDS per genome using prodigal 
'''
####################################################################################################


rule target_prodigal:
    input:
        os.path.join(_genecall_resdir_,"tables","stats.tsv"),
        expand(
            os.path.join(_genecall_resdir_, "cds","{bin}", "{bin}.coord.gff"),
            bin=_genecall_input_.keys()),
        expand(
            os.path.join(_genecall_resdir_, "cds","{bin}", "{bin}_cds_nucleotide.fnn"),
            bin=_genecall_input_.keys()),
        expand(
            os.path.join(_genecall_resdir_, "cds","{bin}", "{bin}_translated_cds.faa"),
            bin=_genecall_input_.keys()),

def define_mode(wildcards,checkm_stats=config['checkm_stats']):
    if checkm_stats:
        if os.path.isfile(checkm_stats):
            df = pd.read_csv(checkm_stats,sep="\t",index_col=0)
            comp,conta = df.loc[
                wildcards.bin,
                ["completeness","contamination"]
                ].values
            if comp > 50 and conta < 10:
                return "single"
            else:
                return "meta"
    return config['mode']

rule expand_summary:
    output:
        os.path.join(_genecall_resdir_,"tables","stats.tsv")
    input:
        expand(
            os.path.join(_genecall_resdir_, "cds","{bin}","stats.tsv"),
            bin=_genecall_input_.keys())
    shell:
        'echo -e '
        'file"\t"format"\t"type"\t"num_seqs"\t"sum_len"\t"min_len"\t"avg_len"\t"max_len"\t"label '
        '> {output} && '
        'cat {input} >> {output} '

rule Seqkit:
    output:
        temp(
            os.path.join(_genecall_resdir_,"cds","{bin}","stats.tsv")
            ),
    input:
        lambda wildcards: _genecall_input_[wildcards.bin],
    conda:
        'envs/seqkit.yaml'
    shell:
        'seqkit stats {input} | '
        'tail -n +2 | '
        'sed "s/$/ {wildcards.bin}/g" | tr -s " " "\t" >  {output}'

rule Prodigal:
    output:
        coordinates = os.path.join(_genecall_resdir_, "cds","{bin}","{bin}.coord.gff"),
        nucleo = os.path.join(_genecall_resdir_, "cds","{bin}" , "{bin}_cds_nucleotide.fnn"),
        transl = os.path.join(_genecall_resdir_, "cds","{bin}", "{bin}_translated_cds.faa"),
    input:
        lambda wildcards: _genecall_input_[wildcards.bin],
    params:
        mode = define_mode,
        cmd = lambda wildcards : "gunzip -c" if _genecall_input_[wildcards.bin].endswith(".gz") \
            else "cat",
    conda:
        os.path.join("envs", "prodigal-2.6.yaml")
    log:
        os.path.join(_genecall_resdir_,"logs","prodigal.{bin}.log")
    shell:
        '{params.cmd} {input} | prodigal '
        '-o {output.coordinates} ' 
        '-f gff '
        '-d {output.nucleo} '
        '-a {output.transl} '
        '-p {params.mode}  &> {log} ' 
        
