#!/usr/bin/env python
# -*- coding: utf-8 -*-

configfile: "config/config.yaml"

import os
import pandas as pd
import yaml
import logging

from utils import utils
from utils import log


wlogger = log.setlogger(__name__)

RESDIR = config["RESDIR"]
BINS = utils.parse_input(config["genome_input"] , config["genome_extension"] )

DBFILE = os.path.abspath(
    os.path.join(workflow.snakefile,"..","anvio.scg.txt")
)

wlogger.info(DBFILE)

if config["reset_db"]:
    if os.path.exists(DBFILE):
        os.remove(DBFILE)

    
def get_db_path():
    if os.path.exists(DBFILE):
        scgdb = ""
        with open(DBFILE) as s:
            for line in s.readlines():
                scgdb = line.strip()
        if os.path.isdir(scgdb):
            wlogger.info("SCG_TAXONOMY db found here : {} ".format(scgdb))
            return "--scgs-taxonomy-data-dir {}".format(scgdb)
        else:
            return ""
        #wlogger.error("file already exist but SCG_TAXONOMY db not found here : {} ".format(scgdb))
        #exit(-1)
    else:
        #if config["DBDIR"]:
        if config["DBDIR"] :
            wlogger.info("SCG_TAXONOMY db will be installed here : {} ".format(config["DBDIR"]))
            return "--scgs-taxonomy-data-dir {}".format(config["DBDIR"])
        else :
            wlogger.info("SCG_TAXONOMY db will be installed to default location")
    return ""
        #else:
        #    wlogger.error("You should specify a path where to store SCG_TAXONOMY db with -d (--db) ")
        #    exit(-1)
        

if not BINS:
    wlogger.error("Can't retrieve your bins :( you might check your input or the genome extension.")
    exit(-1)   

rule anvio_estimate:
    input:
        expand(
            os.path.join(RESDIR, "anvio.{table}.tsv"),
            table = ["completness", "classify"]
        )

rule anvio_expand_scg_taxonomy:
    output:
        os.path.join(RESDIR, "anvio.{table}.tsv"),
    input:
        expand(os.path.join(RESDIR , "{bin}" , "anvio.{{table}}.tsv"),bin=BINS.keys()),
    shell:
        "head -n 1 {input[0]} > {output} && tail -n +2 -q {input} >> {output}"

rule anvio_scg_completness:
    output:
        os.path.join(RESDIR , "{bin}" , "anvio.completness.tsv"),
    input:
        os.path.join(RESDIR , "{bin}" , "CONTIGS.db"),
        DBFILE,
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-estimate-genome-completeness -c {input[0]} -o {output}"


rule anvio_scg_taxonomy:
    output:
        os.path.join(RESDIR , "{bin}" , "anvio.classify.tsv"),
    input:
        os.path.join(RESDIR , "{bin}" , "CONTIGS.db"),
        DBFILE,
    params:        
        scgdir  = get_db_path(),            
    threads:
        10
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-run-scg-taxonomy {params.scgdir} -c {input[0]} -T {threads} && "
        "anvi-estimate-scg-taxonomy -c {input[0]} -o {output}"

rule anvio_contig_db:
    output:
        db = os.path.join(RESDIR , "{bin}" , "CONTIGS.db"),
        tmp = temp(os.path.join(RESDIR , "{bin}" , "CONTIGS.fasta")),
    input:
        lambda wildcards: BINS[wildcards.bin],
    conda:
        "envs/anvio-7.1.yaml"
    threads:
        10
    shell:
        "anvi-script-reformat-fasta -o {output.tmp} --simplify-names {input} ; "
        "anvi-gen-contigs-database -T {threads} -f {output.tmp} -o {output.db} -n {wildcards.bin} ; "
        "anvi-run-hmms -c {output.db} --just-do-it -T {threads}"
         

rule anvio_setup:
    output:
        DBFILE,
    params:                        
        scgdir = "--scgs-taxonomy-data-dir {}".format(config["DBDIR"]) if config["DBDIR"] else "",
        reset = "--reset" if config["reset_db"] else "",
    threads:
        10
    conda:
        "envs/anvio-7.1.yaml"
    shell:        
        "anvi-setup-scg-taxonomy {params.scgdir} {params.reset} -T {threads} && echo {params.scgdir} > {output} "             
        # "anvi-setup-scg-taxonomy --reset {params.scgdir} -T {threads} && touch {output}"