from utils import log
from utils import utils
from utils import sample
import yaml

wlogger = log.setlogger(__name__)

"""
    CONFIGS and GLOBALS
"""
RESDIR = config["output_dir"]
SAMPLES_DIR = "SAMPLES"

# yaml.dump(config,open(RESDIR+"/config.yaml",'w'))

# configfile: RESDIR+"/config.yaml"

SAMPLES = sample.Samples(config["input"])

"""
    SETUP
"""
wlogger.info("Grabing configuration and input files =Â°")

READS = SAMPLES.sample2reads() 

if not READS:
    wlogger.error("Can't retrieve your reads :(")
    exit(-1) 

# snakemake start :
rule reads_qc:
    output:
        os.path.join(RESDIR  ,"reads_qc_report.html"),
    input:
        expand(
            os.path.join(
                RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads" ,"multiqc_qc_reads_report.html"
            ), sample = SAMPLES.samples,
        )
    conda:
        "envs/multiqc.1.13.yaml"
    params:
        multiqc_target = RESDIR,
        outdir = RESDIR,
        name = "reads_qc_report.html",
    shell:
        "multiqc {params.multiqc_target} -d -dd 3 -o {params.outdir} -n {params.name}"
  
    
rule reads_qc_multiqc:
    output:
        os.path.join(RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads" ,"multiqc_qc_reads_report.html"),
        
    input:
        LRQC = lambda wildcards: os.path.join( RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads" , "nanoplot" ) if SAMPLES.get_sample_by_id(wildcards.sample).long else [],
        SRQC = lambda wildcards: os.path.join( RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads" , "fastqc" ) if SAMPLES.get_sample_by_id(wildcards.sample).forward or SAMPLES.get_sample_by_id(wildcards.sample).single else [],
    conda:
        "envs/multiqc.1.13.yaml"
    log:
        os.path.join(RESDIR , SAMPLES_DIR, "{sample}","multiqc.log"),
    params:
        multiqc_target = os.path.join(RESDIR,  SAMPLES_DIR , "{sample}" , "qc-reads"),
        outdir = os.path.join(RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads"),
        name = "multiqc_qc_reads_report.html",
    shell:
        "multiqc {params.multiqc_target} -d -dd 3 -o {params.outdir} -n {params.name} > {log}"


rule reads_qc_nanoplot:
    output:
        directory( os.path.join( RESDIR , SAMPLES_DIR, "{sample}" , "qc-reads" , "nanoplot" ) ),
    input:
        lambda wildcards : SAMPLES.get_sample_by_id(wildcards.sample).long,
    params:
        outdir = os.path.join( RESDIR , SAMPLES_DIR, "{sample}" ,  "qc-reads" , "nanoplot" ),
    conda:
        "envs/nanoplot.1.40.yaml"
    log:
        os.path.join(RESDIR , SAMPLES_DIR, "{sample}","nanoplot.error.log"),
    threads: 
        10
    shell:
        "NanoPlot --fastq {input} -o {params.outdir}  -t {threads} 2> {log}"


rule reads_qc_fastqc:
    output:
        directory(os.path.join(RESDIR , SAMPLES_DIR, "{sample}" ,  "qc-reads" , "fastqc")),
    input:
        lambda wildcards : SAMPLES.get_sample_by_id(wildcards.sample).forward,        
        lambda wildcards : SAMPLES.get_sample_by_id(wildcards.sample).reverse,
        lambda wildcards : SAMPLES.get_sample_by_id(wildcards.sample).single,
    params:
        outdir = os.path.join(RESDIR , SAMPLES_DIR, "{sample}" ,  "qc-reads" , "fastqc" ),
    log:
        os.path.join(RESDIR , SAMPLES_DIR, "{sample}","fastqc.error.log"),
    conda:
        "envs/fastqc.0.11.9.yaml"
    resources:
        tmpdir = RESDIR + "/snaketmp"
    threads: 
        10
    shell:
        "mkdir -p {output} && fastqc {input} -o {params.outdir} -t {threads} 2> {log}"


