# configfile: "config/config.yaml"

import os
import logging
import json
import yaml
from utils import log
from utils import utils


wlogger = log.setlogger(__name__)


# config and input validation :

INPUT = utils.parse_input(config["INPUT"] , config["EXTENSION"] )

if not INPUT:
    wlogger.error("Can't retrieve your input files :( you might check your input or the file extension.")
    exit(-1)    

if config["EXTENSION"] == ".db":
    wlogger.info("""Anvi'o mode : 
    Kaiju annotation will be done on genes called from your anvi'o 
    contigs/genomes databases and then imported back into your 
    input files.
    """)
    MODE="ANVIO"
else:
    MODE="NORMAL"
    wlogger.info("""Reads mode:
    input files will be annotated using kaiju and a unique output table
    will be produced.
    """)

# # setup : 
RSCRIPT = workflow.source_path("scripts/kaiju2anvio.R")
RESDIR = config["res_dir"]
KAIJUDB = config["KAIJUDB"]
KAIJUDBFILE = config["dbfile"]
NODES = config["NODES"]
NAMES = config["NAMES"]
FMI = config["FMI"]


def get_db_file(ft,kaijudb,KAIJUDBFILE):
    if os.path.exists(KAIJUDBFILE):
        KAIJUDBS = json.load(open(KAIJUDBFILE))
        if kaijudb in KAIJUDBS:
            return KAIJUDBS[kaijudb][ft]
        else:
            wlogger.error("It's seems that kaiju {} database have not been setup properly \
            please specify a path to names.dmp, nodes.dmp and the fmi file from the command line or use mako-setup-kaiju.".format(
                kaijudb.upper()
            ))  
    else:
        wlogger.error("It's seems that kaiju {} database have not been setup properly \
        please specify a path to names.dmp, nodes.dmp and the fmi file from the command line or use mako-setup-kaiju.".format(
            kaijudb.upper()
        ))
        exit(-1)

def check_db_file(f,ft,kaijudb):
    if f is not None:
        if os.path.exists(f):
            return f
        else:
            wlogger.error("{} does not exist.".format(f))
            exit(-1)
    else:
        get_db_file(ft,kaijudb)

if NODES: NODES = check_db_file(NODES,"nodes",KAIJUDB) 
else: NODES = get_db_file("nodes",KAIJUDB,KAIJUDBFILE)

if NAMES: NAMES = check_db_file(NAMES,"names",KAIJUDB) 
else: NAMES = get_db_file("names",KAIJUDB,KAIJUDBFILE)

if FMI: FMI = check_db_file(FMI,"fmi",KAIJUDB) 
else: FMI = get_db_file("fmi",KAIJUDB,KAIJUDBFILE)


TARGET =  [os.path.join(
            RESDIR,"kaiju.tsv"
        )]

if MODE == "ANVIO":
    TARGET.append(
        os.path.join(RESDIR,"kaiju-anvio-import.done")
    )

rule kaiju_target:
    input:
        TARGET

rule kaiju_concat_table:
    output:
        os.path.join(
            RESDIR,"kaiju.tsv"
        )
    input:
        expand(
            os.path.join(
                RESDIR,"tmp","{sample}","kaiju.reformat.tsv"
            ),sample = INPUT
        )
    shell:
        "head -n 1 {input[0]} > {output} && tail -n +2 -q {input} >> {output}"

rule kaiju_expand_import:
    output:
        os.path.join(RESDIR,"kaiju-anvio-import.done")
    input:
        expand(
            os.path.join(RESDIR,"tmp","{sample}","kaiju.import.done"),
            sample = INPUT
        )
    shell:
        "touch {output}"

rule kaiju_anvio_import:
    output:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.import.done")
    input:
        db  = lambda wildcards: INPUT[wildcards.sample],
        kaiju = os.path.join(RESDIR,"tmp","{sample}","kaiju.reformat.tsv"),
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-import-taxonomy-for-genes "
        "-c {input.db} "
        "-i {input.kaiju} "
        "-p default_matrix && touch {output}"

rule kaiju_reformat_table:
    output:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.reformat.tsv")
    input:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.names")
    params:
        rscript = RSCRIPT,
    conda:
        "envs/r.4.2.2.yaml",
    shell:
        "Rscript {params.rscript} {input} {output}"

rule kaiju_add_taxon_names:
    output:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.names")
    input:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.out")
    log:
        os.path.join(RESDIR,"tmp","{sample}","log","kaiju.names.log"),
    params:
        nodes = NODES,
        names = NAMES,
    conda:
        "envs/kaiju.1.9.0.yaml"
    threads:
        10        
    shell:    
        "kaiju-addTaxonNames -t {params.nodes} "
        "-n {params.names} "
        "-i {input} "
        "-o {output} "
        "-r superkingdom,phylum,order,class,family,genus,species"

def get_kaiju_input(wildcards):
    if MODE == "ANVIO":
        return os.path.join(RESDIR,"tmp",wildcards.sample,"genes.fa")
    else:
        return INPUT[wildcards.sample]

rule kaiju_classify:
    output:
        os.path.join(RESDIR,"tmp","{sample}","kaiju.out")
    input:
        get_kaiju_input,
    log:
        os.path.join(RESDIR,"tmp","{sample}","log","kaiju.log"),
    params:
        nodes = NODES,
        fmi = FMI,
    conda:
        "envs/kaiju.1.9.0.yaml"
    threads:
        10
    shell:
        "kaiju -z {threads} "
        "-t {params.nodes} "
        "-f {params.fmi} " 
        "-i {input} "
        "-o {output} > {log}" 

rule kaiju_anvio_gene_call:
    output:
        os.path.join(RESDIR,"tmp","{sample}","genes.fa"),
    input:
        lambda wildcards: INPUT[wildcards.sample],
    log:
        os.path.join(RESDIR,"tmp","{sample}","log","gene_call.log"),
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-get-sequences-for-gene-calls -c {input} "
        "-o {output} > {log}"