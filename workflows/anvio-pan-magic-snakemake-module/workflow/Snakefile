from utils import utils
from utils import log 

wlogger = log.setlogger(__name__)
    
wlogger.info("Grabing configuration and input files")

RESDIR = config["RESDIR"]
TMPDIR = config["RESDIR"] + "/tmp"

CONTIGS = utils.parse_input(config["CONTIGS"], config["extension"])

if not CONTIGS:    
    wlogger.error("Can't retrieve your contigs from input file")
    exit(-1)

if len(CONTIGS) == 1:
    wlogger.error("Can't perform pangenomics analysis with one genome.")
    exit(-1)

wlogger.info("Input files seems corrects .... continuing ")
wlogger.info("we can start anvi'o magic ! ")    

anviodbs = utils.get_anvio_db_path()

onerror:
    wlogger.error("an error occured during anvio-magic WORKFLOW :(")

TARGET = os.path.join(RESDIR,"pangenomics.done")
if config["FUN_ONLY"]:
    TARGET = os.path.join(RESDIR,"anvio-functions.txt")

rule all:
    input:
        TARGET

rule anvio_pangenomics:
    output:
        os.path.join(RESDIR,"pangenomics.done"),
    input:
        os.path.join(RESDIR,"pan-GENOMES.db"),
    params:
        outdir = os.path.join(RESDIR,"pangenomics"),
        name = config["NAME"],
    conda:  
        "envs/anvio-7.1.yaml"
    threads:
        10
    shell:
        "anvi-pan-genome -g {input} "
        "--project-name '{params.name}' "
        "--output-dir {params.outdir} "
        "--num-threads {threads} "
        "--minbit 0.5 "
        "--mcl-inflation 10 "
        "--use-ncbi-blast && touch {output}"
    
rule anvio_make_genome_db:
    output:
        os.path.join(RESDIR,"pan-GENOMES.db"),
    input:
        os.path.join(RESDIR,"external-genomes.txt"),
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-gen-genomes-storage -e {input} "
        "-o {output}"

rule anvio_make_genome_db_file:
    output:
        temp(os.path.join(RESDIR,"external-genomes.txt")),
    input:
        db = expand(
            os.path.join(TMPDIR, "{contig}" , "CONTIGS.db"), 
            contig = CONTIGS),
        f1 = expand(
            os.path.join(TMPDIR, "{contig}" , "anvio.classify.tsv"),
            contig = CONTIGS),
        f2 = expand(
            os.path.join(TMPDIR, "{contig}" , "cogs.done"),
            contig = CONTIGS),
        f3 = expand(
            os.path.join(TMPDIR, "{contig}" , "pfams.done"),
            contig = CONTIGS),
        f4 = expand(
            os.path.join(TMPDIR, "{contig}" , "keggs.done"),
            contig = CONTIGS),
    params:
        resdir = RESDIR
    run:
        with open(str(output) , 'w' ) as stream:
            stream.write("name\tcontigs_db_path\n")
            for f in input.db:
                contig = os.path.dirname(f).split("/")[-1]
                contig = contig.replace(".","_").replace("-","_")
                
                stream.write("{}\t{}\n".format(
                    contig,
                    os.path.relpath( f, start = str(params.resdir ))
                ))

rule anvio_function_merge_table:
    output:
        os.path.join(RESDIR,"anvio-functions.txt")
    input:
        expand(
            os.path.join(TMPDIR , "{contig}" , "anvio-functions.txt"), contig = CONTIGS
        )        
    shell:
        "echo 'gene_callers_id;source;accession;function;e_value;contigfile' | tr ';' '\t' > {output} && "
        "cat {input} >> {output}"
        # "head -n 1 {input[0]} > {output} && tail -n +2 -q {input} >> {output}"


rule anvio_function_table:
    output:
        txt = os.path.join(TMPDIR , "{contig}" , "anvio-functions.txt"),
        tmp = temp(os.path.join(TMPDIR , "{contig}" , "anvio-functions.tmp")),
    input: 
        db = os.path.join(TMPDIR, "{contig}" , "CONTIGS.db"),             
        f1 = os.path.join(TMPDIR, "{contig}" , "anvio.classify.tsv"),
        f2 = os.path.join(TMPDIR, "{contig}" , "cogs.done"),
        f3 = os.path.join(TMPDIR, "{contig}" , "pfams.done"),
        f4 = os.path.join(TMPDIR, "{contig}" , "keggs.done"),
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-export-functions -c {input.db} -o {output.tmp} && "
        "tail -n +2 {output.tmp} | sed 's/$/\t{wildcards.contig}/g' > {output.txt}"


rule anvio_scg_taxonomy:
    output:
        os.path.join(TMPDIR , "{contig}" , "anvio.classify.tsv"),
    input:
        ancient(os.path.join(TMPDIR, "{contig}" , "CONTIGS.db")), 
    params:     
        mode = "--metagenome-mode" if config["META"] else "",   
        scgdir  = "--scgs-taxonomy-data-dir {}".format(anviodbs) if anviodbs else "",          
    threads:
        10
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-run-scg-taxonomy {params.scgdir} -c {input} -T {threads} && "
        "anvi-estimate-scg-taxonomy {params.mode} -c {input} -o {output}"

rule anvio_pfams:
    output:
        os.path.join(TMPDIR, "{contig}" , "pfams.done"),
    input:
        ancient(os.path.join(TMPDIR, "{contig}" , "CONTIGS.db")), 
    threads:
        10
    params:
        anviodbs = "--pfam-data-dir {}".format(anviodbs) if anviodbs else "",    
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-run-pfams {params.anviodbs} "
        "-c {input} --num-threads {threads} && "
        "touch {output} "


rule anvio_keggs:
    output:
        os.path.join(TMPDIR, "{contig}" , "keggs.done"),
    input:
        ancient(os.path.join(TMPDIR, "{contig}" , "CONTIGS.db")), 
    threads:
        10
    params:
        anviodbs = "--kegg-data-dir {}".format(anviodbs) if anviodbs else "",    
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-run-kegg-kofams {params.anviodbs} "
        "-c {input} --num-threads {threads} "
        "--just-do-it && touch {output} "


rule anvio_cogs:
    output:
        os.path.join(TMPDIR, "{contig}" , "cogs.done"),
    input:
        ancient(os.path.join(TMPDIR, "{contig}" , "CONTIGS.db")),     
    threads:
        10
    params:
        anviodbs = "--cog-data-dir {}".format(anviodbs) if anviodbs else "",
    conda:
        "envs/anvio-7.1.yaml"
    shell:
        "anvi-run-ncbi-cogs {params.anviodbs} "
        "-c {input} "
        "--num-threads {threads} && "
        "touch {output} "


rule anvio_contig_db:
    output:
        os.path.join(TMPDIR, "{contig}", "CONTIGS.db"),
    input:
        os.path.join(TMPDIR, "{contig}", "tmp.fasta"),        
    conda:
        "envs/anvio-7.1.yaml"
    threads:
        10
    shell:
        "anvi-gen-contigs-database -T {threads} -f {input} -o {output} -n '{wildcards.contig}' && "
        "anvi-run-hmms -c {output} -T {threads} --just-do-it "


rule anvio_contig_reformat:
    output:
        temp(os.path.join(TMPDIR, "{contig}", "tmp.fasta")),
    input:
        lambda wildcards : CONTIGS[wildcards.contig],
    conda:
        "envs/anvio-7.1.yaml"
    threads:
        10
    shell:
        "anvi-script-reformat-fasta  -o {output} --simplify-names {input}"
        