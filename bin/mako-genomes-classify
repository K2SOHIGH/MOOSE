import argparse
import sys
import os
import yaml
import logging
import multiprocessing


from utils import utils
from utils import log

logger = log.setlogger(__name__)

def get_args():
    parser = argparse.ArgumentParser(
            prog=__name__,
            description='Process genomes by batches through gtdb-tk'
        )

    parser.add_argument(
        '-i',
        '--input',
        dest="genome_input",
        type = str,
        required=True,
        help="yaml file containing path to translated cds files , a fasta file or a directory containing fasta files"
        )
    
    parser.add_argument(
        '-o',
        '--output-directory',
        dest= "res_dir",
        type = str,
        default="resCheckm",
        help="output directory"
    )

    parser.add_argument(
        '--merge-with',        
        dest= "merge_with",
        type = str,
        default=None,
        help="path to another gtdb-wf results directory"
    )    

    parser.add_argument(
        '--gtdb-datas',        
        dest = "GTDB",
        type = str,
        # required=True,
        help="path to GTDB database"
    )

    parser.add_argument(
        '-z',
        '--batch-size',
        dest = "batch_size",
        type = int,
        default=1000,
        help="number of genomes to process at once"
    )

    parser.add_argument(
        '-e',
        '--extension',
        dest = "genome_extension",
        type = str,
        default="fna.gz",
        help="genome file extension"
    )

    parser.add_argument(
        '--ani',        
        dest = "GTDB_isani",
        action='store_true',
        help="run GTDB ANI workflow"
    )

    parser.add_argument(
        '--gtdb-mash-params',
        dest = "GTDB_mash",
        type = str,
        default = "k=16,s=5000,d=0.1,v=1.0",
        help="mash parmameters"
    )

    parser.add_argument('--gtdb-fmf', dest = "GTDB_fa_min_af" , type=float, default=0.65)

    parser.add_argument('--log', dest='log', type=str, default="gtdb-tk-wf.log")
        
    parser.add_argument(
        '-t',
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="",
            help='snakmake arguments')

    args = parser.parse_args()
    return args


def main():
    args = get_args()                
    utils.module(
            "gtdbtk-snakemake-module",            
            args
        )

if __name__ == "__main__":
    sys.exit(main())

    