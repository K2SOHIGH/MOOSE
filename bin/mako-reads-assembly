#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import argparse
import shutil
import multiprocessing
import yaml

from utils import log
from utils import utils

logger = log.setlogger("mgw-assembly-module")
    
def get_args():
    parser = argparse.ArgumentParser(
        prog='mgw-assemble',
        description='Assemble reads into assembly'
    )

    parser.add_argument('-i', "--input" , dest="INPUT" , required=True, default=None ,  type=str , help = "INPUT YAML file, see README.md for format.")

    parser.add_argument('-o', '--output-dir' , dest="RESDIR" , default = "." , type=str)

    parser.add_argument('--rerun' , action='store_true')

    parser.add_argument('-c', "--coassembly" , dest="COASSEMBLY" , default=None ,  type=str , help = "config YAML file detailing co-assembly groups, see README.md for format.")

    parser.add_argument('--mappers' , dest="MAPPERS" , default=None ,  type=str , help = "config YAML file detailing which samples to map against others, see README.md for format.")

    parser.add_argument('-a' , '--assemblers', dest='ASSEMBLERS',  default = ["megahit" , "unicycler", "spades" , "miniasm"],  nargs='*',
        choices=["megahit" , "unicycler", "spades" , "miniasm"], 
        help="assembler to use, by default spades, unicycler and megahit will be ran" )

    parser.add_argument('-w' , '--workflows' , dest='WORKFLOWS', default = [ "SRO" , "SRF", "LRF" ], nargs='*',
        choices=[ "SRO" , "SRF", "LRF" ],
        help="assembly type you want to achieve. if auto is set , then assembly types will be infere from each sample based on their INPUT files. If short and long reads are specified, then short_reads, long_reads and hybrid assembly will be ran" )

    parser.add_argument('-k' , '--kmers' , dest="KLIST", default = ["77"] , nargs='*' , 
        help="list of kmer length to use.")

    parser.add_argument('-m','--mode' , dest='MODE' , default = None, 
        choices = ['isolate', 'sc', 'meta', 'bio', 'corona', 'rna', 'plasmid', 'metaviral', 'metaplasmid', 'rnaviral', 'iontorrent'],
        help = "Assembly mode used with spades [and spades through unicycler]"
    )

    parser.add_argument('-mc' , dest="MEGAHIT" , default = None, type = str , help="quoted string of megahit commandline extra parameters")

    parser.add_argument('-uc' , dest="UNICYCLER" , default = None, type = str , help="quoted string of unicycler commandline extra parameters")

    parser.add_argument('-sc', dest="SPADES" , default = None, type = str , help="quoted string of spades commandline extra parameters")

    parser.add_argument('--min-quality' , default = 20, type = int , help="min quality read")

    parser.add_argument('--min-identity' , default = 95, type = int , help="min identity read")

    parser.add_argument('--min-len' , default = 100, type = int , help="min length read")

    parser.add_argument('--not-properly-paired',dest="properly_paired", default=True , action="store_false" , help="should read be properly paired ?")

    #parser.add_argument('--logfile' , default = None, type = str , help="logfile")

    parser.add_argument(        
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="-q",
            help='snakmake arguments')
    args = parser.parse_args()
    return args

def main():
    args = get_args()
    utils.module(
        "assemble-snakemake-module",
        os.path.join( 
            os.path.abspath(
                os.path.dirname(__file__)
            ), 
            "../condaenvs"
        ),
        args
    )
    

if __name__ == "__main__":
    main()


