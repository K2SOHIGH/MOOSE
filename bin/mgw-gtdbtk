import argparse
import sys
import os
import yaml
import logging
import multiprocessing


from utils import utils
from utils import log

logger = log.setlogger("gtdb-snakemake-module")

def get_args():
    parser = argparse.ArgumentParser(
            prog='gtdb-wf',
            description='process genomes by batches through gtdb-tk'
        )

    parser.add_argument(
        '-i',
        '--input',
        dest="genome_input",
        type = str,
        required=True,
        help="yaml file containing path to translated cds files , a fasta file or a directory containing fasta files"
        )
    
    parser.add_argument(
        '-o',
        '--output-directory',
        dest= "res_dir",
        type = str,
        default="resCheckm",
        help="output directory"
    )

    parser.add_argument(
        '--merge-with',        
        dest= "merge_with",
        type = str,
        default=None,
        help="path to another gtdb-wf results directory"
    )    

    parser.add_argument(
        '--gtdb-datas',        
        dest = "GTDB",
        type = str,
        # required=True,
        help="path to GTDB database"
    )

    parser.add_argument(
        '-z',
        '--batch-size',
        dest = "batch_size",
        type = int,
        default=1000,
        help="number of genomes to process at once"
    )

    parser.add_argument(
        '-e',
        '--extension',
        dest = "genome_extension",
        type = str,
        default="fna.gz",
        help="genome file extension"
    )

    parser.add_argument(
        '--ani',        
        dest = "GTDB_isani",
        action='store_true',
        help="run GTDB ANI workflow"
    )

    parser.add_argument(
        '--gtdb-mash-params',
        dest = "GTDB_mash",
        type = str,
        default = "k=16,s=5000,d=0.1,v=1.0",
        help="mash parmameters"
    )

    parser.add_argument('--gtdb-fmf', dest = "GTDB_fa_min_af" , type=float, default=0.65)

    parser.add_argument('--log', dest='log', type=str, default="gtdb-tk-wf.log")
        
    parser.add_argument(
        '-t',
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="",
            help='snakmake arguments')

    args = parser.parse_args()
    return args


def main():
    args = get_args()
    logger.info("Running gtdb-snakemake-module !")

    cprefix = os.path.join( os.path.abspath( os.path.dirname(__file__)) , "../condaenvs")

    if args.GTDB is None or not os.path.isdir(args.GTDB):
        logger.error("GTDB is missing ! See --gtdb-datas option or mgw-download-dbs command !")
        exit(-1)

    if args.GTDB_mash:
        args.GTDB_mash = {i.split("=")[0]:i.split("=")[1]  for i in args.GTDB_mash.split(",")}
     
    BINS = utils.parse_input(args.genome_input , args.genome_extension )

    if BINS:
        os.makedirs(args.res_dir , exist_ok= True)
        for gid,gpath in BINS.items():            
            logger.info("%s : %s" % (gid,gpath))
        logger.info("Number of genomes : %i" % len(BINS))
        
        CONFIG = utils.args2dict(args)
        
        yaml.dump(CONFIG, open( args.res_dir + "/config.yaml" , 'w'))

        excode = utils.run_snakemake(            
            os.path.join(os.path.dirname(__file__),".."),
            "gtdbtk",
            args.res_dir + "/config.yaml",
            args.threads,
            cprefix,
            args.snakargs       
        )

        if excode != 0:
            logger.error("Snakemake fail with exit code %i " % excode)
            exit(-1)
        logger.info("Genome(s) Classified ! Awesome !")
    else:
        logger.error("Can't retrieve your bins ... check the genome extension =Â°")
        exit(-1)


if __name__ == "__main__":
    sys.exit(main())