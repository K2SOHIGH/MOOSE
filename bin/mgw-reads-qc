#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import argparse
import shutil
import multiprocessing
import yaml
from utils import utils
from utils import log

logger = log.setlogger("mgw-reads-qc-module")
    

def get_args():
    parser = argparse.ArgumentParser(
        prog='mgw-reads-qc',
        description='long reads and short reads quality check')

    parser.add_argument('-i', "--input" , required=True, default=None ,  type=str , help = "input YAML file, see README.md for format.")

    parser.add_argument('-o', '--output-dir'  , default = "." , type=str)

    parser.add_argument('--rerun' , action='store_true')

    #parser.add_argument('--logfile' , default = None, type = str , help="logfile")

    parser.add_argument(        
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="",
            help='snakmake arguments')

    # parser.add_argument('--conda-prefix', type=str,
    #     default = os.path.join( os.path.abspath( os.path.dirname(__file__)) , "../conda_env") , 
    #     help = "directory where conda environment will be stored" )
    
    args = parser.parse_args()
    return args


def main():
    args = get_args()
    logger.info("Running reads-qc-snakemake-module !")

    cprefix = os.path.join( os.path.abspath( os.path.dirname(__file__)) , "../condaenvs")

    logger.info("Snakemake will install conda environment in %s" % cprefix)
    args.output_dir = os.path.abspath(args.output_dir)
    
    # Parsing input files : 
    READS = yaml.load( open(args.input) , Loader = yaml.SafeLoader )
    if READS:
    # yaml.dump(INPUTS,open(READSFILE, 'w'))
        try:
            os.makedirs( args.output_dir , exist_ok = args.rerun )
            logger.info("Results will be store in {}".format(args.output_dir))
        except FileExistsError:
            logger.error("Can't create output directory, output directory already exist (use --rerun flag if you're sure) [{}]".format(args.output_dir))
            exit(-1)    
        
        CONFIG = utils.args2dict(args)
        yaml.dump(CONFIG, open( args.output_dir + "/config.yaml" , 'w'))
    
        excode = utils.run_snakemake(            
            os.path.join(os.path.dirname(__file__),".."),
            "reads-qc",
            args.output_dir + "/config.yaml",
            args.threads,
            cprefix,
            args.snakargs       
        )

        if excode != 0:
            logger.error("Hum ... something went wrong while executing the workflow ... :( ")
            exit(-1)
        logger.info("reads-qc workflow terminate with exit code 0 ! Congrats ! ")
    else:
        logger.error("Can't retrieve your reads ... :(")
        exit(-1)
    if "-n" in args.snakargs or "--dryrun" in args.snakargs:
        shutil.rmtree(args.output_dir)

if __name__ == "__main__":
    main()




