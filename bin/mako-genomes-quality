import argparse
import sys
import os
import yaml

import multiprocessing


from utils import utils
from utils import log


logger = log.setlogger(__name__)


def get_args():
    parser = argparse.ArgumentParser(
            prog=__name__,
            description='Process genomes by batches through checkm lineage or taxonomic workflow'
        )

    parser.add_argument(
        '-i',
        '--input',
        dest="genome_input",
        type=str,
        required=True,
        help="yaml file containing path to fasta files , a fasta file or a directory containing fasta files"
        )
    
    parser.add_argument(
        '-e',
        '--extension',
        dest = "genome_extension",
        type=str,
        default=".fna.gz",
        help="genome file extension"
    )

    parser.add_argument(
        '-o',
        '--output-directory',
        dest= "res_dir",
        default="resCheckm",
        type=str,
        help="output directory"
    )

    parser.add_argument(
        '--tmp',
        dest= "TMP",
        default=None,
        type=str,
        help="temporary directory"
    )

    parser.add_argument(
        '-d',
        '--checkm-datas',
        type=str,
        dest = "CheckM_data",
        # required=True,
        help="path to checkm datas"
    )

    parser.add_argument(
        '-z',
        '--batch-size',
        dest = "batch_size",
        default=1000,
        type=int,
        help="number of genomes to process at once"
    )



    parser.add_argument(
        '-m',
        '--low-memory',
        dest = "low_memory",        
        action='store_true',
        help="low memory mode"
    )

    parser.add_argument(
        '-t',
        '--taxonomy',
        dest = "taxonomy_wf",
        type=str,
        default = None,
        help="taxonomy mode enable, take a string 'rank;taxon' are required"
    )

    parser.add_argument(        
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="",
            help='snakmake arguments')

    args = parser.parse_args()
    return args


def main():
    args = get_args()                
    utils.module(
            "checkm-snakemake-module",            
            args
        )

if __name__ == "__main__":
    sys.exit(main())    