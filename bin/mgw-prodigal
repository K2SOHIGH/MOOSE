import argparse
import sys
import os
import yaml
import logging
import multiprocessing


from utils import utils
from utils import log

logger = log.setlogger("prodigal-snakemake-module")



def get_args():
    parser = argparse.ArgumentParser(
            prog='prodigal-snakemake-module',
            description='run prodigal on a set of genomes'
        )

    parser.add_argument(
        '-i',
        '--input',
        dest="genome_input",
        type = str,
        required=True,
        help="yaml file containing path to translated cds files , a fasta file or a directory containing fasta files"
        )
    
    parser.add_argument(
        '-o',
        '--output-directory',
        dest= "res_dir",
        type = str,
        default="resCheckm",
        help="output directory"
    )

    parser.add_argument(
        '--checkm-stats',                
        type = str,
        default=None,
        #help="path to another gtdb-wf results directory"
    )    

    parser.add_argument(
        '-e',
        '--extension',
        dest = "genome_extension",
        type = str,
        default="fna.gz",
        help="genome file extension"
    )
        
    parser.add_argument(
        '-t',
        '--threads',
        type = int,
        default = multiprocessing.cpu_count()-1,
        help = "number of threads",
    )

    parser.add_argument('--snakargs', dest='snakargs', type=str, default="",
            help='snakmake arguments')

    args = parser.parse_args()
    return args

def main():
    args = get_args()
    logger.info("Running prodigal-snakemake-module !")
    
    BINS = utils.parse_input(args.genome_input , args.genome_extension )
    if BINS:
        utils.module(
            "prodigal-snakemake-module",
            os.path.join( os.path.abspath( os.path.dirname(__file__)) , "../condaenvs"),
            args
        )
        exit()
        os.makedirs(args.res_dir , exist_ok= True)
        for gid,gpath in BINS.items():            
            logger.info("%s : %s" % (gid,gpath))
        logger.info("Number of genomes : %i" % len(BINS))
        
        CONFIG = utils.args2dict(args)
        
        yaml.dump(CONFIG, open( args.res_dir + "/config.yaml" , 'w'))

        excode = utils.run_snakemake(            
            os.path.join(os.path.dirname(__file__),".."),
            "prodigal",
            args.res_dir + "/config.yaml",
            args.threads,
            cprefix,
            args.snakargs       
        )

        if excode != 0:
            logger.error("Snakemake fail with exit code %i " % excode)
            exit(-1)
        logger.info("Oh my precious CDS !")
    else:
        logger.error("Can't retrieve your bins ... check the genome extension =Â°")
        exit(-1)


if __name__ == "__main__":
    sys.exit(main())